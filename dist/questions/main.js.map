{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/questions/accordion/accordion.component.ts","./src/app/questions/accordion/accordion.component.html","./src/app/questions/questions.component.ts","./src/app/questions/questions.component.html","./src/app/questions/questions.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'questions';\n}\n","<app-questions title=\"HAVE A QUESTION? WE CAN HELP\"></app-questions>\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgxSkeletonLoaderModule } from 'ngx-skeleton-loader';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { QuestionsComponent } from './questions/questions.component';\r\nimport { AccordionComponent } from './questions/accordion/accordion.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    QuestionsComponent,\r\n    AccordionComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    HttpClientModule,\r\n    NgxSkeletonLoaderModule,\r\n    MatExpansionModule\r\n  ],\r\n  providers: [ ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, Input, OnInit, ViewChild } from '@angular/core';\r\n\r\nimport { MatAccordion} from '@angular/material/expansion';\r\nimport { Question } from '../question';\r\n\r\n/**\r\n * Component which displays the list of questions in an accordion.\r\n * It uses the angular material component 'mat-accordion'\r\n */\r\n@Component({\r\n  selector: 'app-accordion',\r\n  templateUrl: './accordion.component.html',\r\n  styleUrls: ['./accordion-animations.scss', './accordion.component.scss']\r\n})\r\nexport class AccordionComponent implements OnInit {\r\n  @ViewChild(MatAccordion) accordion: MatAccordion;\r\n  @Input() questions: Array<Question>;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  /**\r\n   * Used for improving ngFor directive; called for every question displayed.\r\n   * @param index The index of the question\r\n   * @param question The question\r\n   * @return An index to be used by ngFor for the question received as parameter\r\n   */\r\n  trackByFunction(index: number, question: Question): number {\r\n    return index;\r\n  }\r\n}\r\n","<mat-accordion displayMode=\"flat\" hideToggle=\"true\">\r\n  <mat-expansion-panel *ngFor=\"let question of questions; trackBy: trackByFunction\">\r\n    <mat-expansion-panel-header collapsedHeight=\"auto\" expandedHeight=\"auto\">\r\n      <mat-panel-title>\r\n        <!-- question number -->\r\n        <span class=\"question-index\">Q{{question.id}}</span>\r\n        {{question.question}}\r\n      </mat-panel-title>\r\n      <!-- custom expand arrow -->\r\n      <span class=\"custom-indicator\"><span class=\"plus\"></span></span>\r\n    </mat-expansion-panel-header>\r\n    <p>{{question.answer}}</p>\r\n  </mat-expansion-panel>\r\n</mat-accordion>\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { Observable, of, Subject, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\nimport { QuestionsService } from './questions.service';\r\nimport { Question } from './question';\r\n\r\n/**\r\n * Component which displays the data required by design:\r\n *  - the title\r\n *  - the separator\r\n *  - the list of questions\r\n * This component manages the loading state and the error state:\r\n *  - a skeleton loader is displayed until the information is ready from the backend\r\n *  - a dummy error message is displayed if the HTTP request fails\r\n */\r\n@Component({\r\n  selector: 'app-questions',\r\n  templateUrl: './questions.component.html',\r\n  styleUrls: ['./questions.component.scss']\r\n})\r\nexport class QuestionsComponent implements OnInit {\r\n  @Input() title: string;\r\n\r\n  /**\r\n   * Observable object synchronized with the template and with the backend data.\r\n   * When backend data is ready this object contains the questions to be displayed.\r\n   */\r\n  questions$: Observable<Array<Question>|undefined>;\r\n\r\n  /**\r\n   * Observable object updated when fetching data from the backend fails.\r\n   */\r\n  error$: Subject<boolean> = new Subject();\r\n\r\n  constructor(private questionsService: QuestionsService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.questions$ = this.questionsService.getQuestions().pipe(\r\n      catchError( (error: Error) => {\r\n        // HTTP request failed\r\n        throwError(error.message);\r\n        this.error$.next(true);\r\n        return of(undefined);\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","<div class=\"questions\">\r\n  <h2 class=\"title\">{{title}}</h2>\r\n  <div class=\"separator\"></div>\r\n\r\n  <!-- accordion component displaying the questions received from the backend -->\r\n  <app-accordion *ngIf=\"questions$ | async as questions; else noDataTemplate\"\r\n    [questions]=\"questions\"></app-accordion>\r\n\r\n  <!-- render this template while waiting backend data -->\r\n  <ng-template #noDataTemplate>\r\n    <!-- display a dummy error message if the HTTP request fails -->\r\n    <div class=\"error\" *ngIf=\"error$ | async; else loading\">\r\n      Error loading the questions.\r\n    </div>\r\n    <!-- display a skeleton loader while waiting for backend data or for an error -->\r\n    <ng-template #loading>\r\n      <div class=\"loading\">\r\n        <ngx-skeleton-loader count=\"5\"></ngx-skeleton-loader>\r\n      </div>\r\n    </ng-template>\r\n  </ng-template>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class QuestionsService {\r\n  private dataSourcePath = '../../assets/mocks/DataSource.json';\r\n\r\n  constructor(private httpClient: HttpClient) {}\r\n\r\n  /**\r\n   * Returns an Observable object with the data stored in assets/mocks/DataSource.json.\r\n   */\r\n  getQuestions(): Observable<object> {\r\n    return this.httpClient.get(this.dataSourcePath);\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}